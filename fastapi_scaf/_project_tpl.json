{
    ".gitignore": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n#.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# Append\n.idea\n.vscode\n*.sqlite3\n",
    "LICENSE": "Copyright (c) 2024 axiner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "main_dev.py": "\"\"\"\n@author axiner\n@version v1.0.0\n@created 2024/7/29 22:22\n@abstract main_dev\uff08\u5f00\u53d1\u7528\uff09\n@description\n@history\n\"\"\"\nimport argparse\n\n\ndef run_by_cmd():\n    import subprocess\n\n    cmd = (\n        'uvicorn app.main:app '\n        '--host=0.0.0.0 '\n        '--port=8000 '\n        '--log-level=debug '\n        '--log-config=./config/uvicorn_logging.json '\n        '--reload'\n    )\n    subprocess.run(cmd, shell=True)\n\n\ndef run_by_uvicorn():\n    import uvicorn\n    from app.main import app\n\n    uvicorn.run(\n        app,\n        host=\"0.0.0.0\",\n        port=8000,\n        log_level=\"debug\",\n        log_config=\"./config/uvicorn_logging.json\"\n    )\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--cmd\", action='store_true', help=\"\u662f\u5426cmd\u8fd0\u884c\")\n    args = parser.parse_args()\n    is_cmd = args.cmd\n    if is_cmd:\n        run_by_cmd()\n    else:\n        run_by_uvicorn()\n\n\nif __name__ == '__main__':\n    main()\n",
    "README.md": "# fastapi-scaf\n\n## What is this?\n- by: axiner\n- fastapi-scaf\n- This is a fastapi scaf.\n  - new project\n  - add api\n  - about project:\n    - auto init project (conf, db, logger...)\n    - auto register router\n    - auto register middleware\n\n## Installation\nThis package can be installed using pip (>=Python3.9):\n> pip install fastapi-scaf\n\n## Scaf Usage\n- 1\uff09new project\n  - `fastapi-scaf new <project_name>`\n- 2\uff09add api\n  - `cd to project root dir`\n  - `fastapi-scaf add <api_name>`\n\n## Project Run\n- 1\uff09cd to project root dir\n- 2\uff09execute command:\n  - `pip install -r requirements.txt`\n  - `uvicorn app.main:app --host=0.0.0.0 --port=8000 --log-level=debug --log-config=./config/uvicorn_logging.json --workers=5`\n  - about uvicorn: [www.uvicorn.org](https://www.uvicorn.org/)\n\n## Project Structure\n- ABD: ABD\u6a21\u5f0f\n  - A   api\n  - B   business\n  - D   datatype\n- \u8c03\u7528\u8fc7\u7a0b: main.py(initializer) - router(middleware) - api - business - (datatype)\n- \u7ed3\u6784\u5982\u4e0b: (\u547d\u540d\u7ecf\u8fc7\u591a\u6b21\u4fee\u6539\u6572\u5b9a\uff0c\u7b80\u6d01\u6613\u61c2\uff0cABD\u76ee\u5f55\u8d34\u5408\u907f\u514d\u6742\u4e71\u65e0\u7ae0)\n  ```\n  \u2514\u2500\u2500 fastapi-scaf\n      \u251c\u2500\u2500 app                         (\u5e94\u7528)\n      \u2502   \u251c\u2500\u2500 api                     \u251c\u2500\u2500 (api)\n      \u2502   \u2502   \u2514\u2500\u2500 v1                  \u2502   \u2514\u2500\u2500 (v1)\n      \u2502   \u251c\u2500\u2500 business                \u251c\u2500\u2500 (\u4e1a\u52a1)\n      \u2502   \u251c\u2500\u2500 datatype                \u251c\u2500\u2500 (\u6570\u636e\u7c7b\u578b)\n      \u2502   \u251c\u2500\u2500 initializer             \u251c\u2500\u2500 (\u521d\u59cb\u5316)\n      \u2502   \u2502   \u251c\u2500\u2500 conf                \u2502   \u251c\u2500\u2500 (\u914d\u7f6e)\n      \u2502   \u2502   \u251c\u2500\u2500 db                  \u2502   \u251c\u2500\u2500 (\u6570\u636e\u5e93)\n      \u2502   \u2502   \u251c\u2500\u2500 logger              \u2502   \u251c\u2500\u2500 (\u65e5\u5fd7)\n      \u2502   \u2502   \u2514\u2500\u2500 ...                 \u2502   \u2514\u2500\u2500 (...)\n      \u2502   \u251c\u2500\u2500 middleware              \u251c\u2500\u2500 (\u4e2d\u95f4\u4ef6)\n      \u2502   \u251c\u2500\u2500 router                  \u251c\u2500\u2500 (\u8def\u7531)\n      \u2502   \u251c\u2500\u2500 utils                   \u251c\u2500\u2500 (utils)\n      \u2502   \u2514\u2500\u2500 main.py                 \u2514\u2500\u2500 (main.py)\n      \u251c\u2500\u2500 config                      (\u914d\u7f6e\u76ee\u5f55)\n      \u251c\u2500\u2500 deploy                      (\u90e8\u7f72\u76ee\u5f55)\n      \u251c\u2500\u2500 docs                        (\u6587\u6863\u76ee\u5f55)\n      \u251c\u2500\u2500 log                         (\u65e5\u5fd7\u76ee\u5f55)\n      \u251c\u2500\u2500 .gitignore\n      \u251c\u2500\u2500 LICENSE\n      \u251c\u2500\u2500 README.md\n      \u2514\u2500\u2500 requirements.txt\n  ```\n\n## LICENSE\nThis project is released under the MIT License (MIT). See [LICENSE](LICENSE)\n",
    "requirements.txt": "# Python>=3.9\nfastapi~=0.112.0\nuvicorn~=0.30.6\ntoollib>=1.5.9\npython-dotenv~=1.0.1\nPyYAML~=6.0.2\nloguru~=0.7.2\nsqlmodel~=0.0.21\naiosqlite~=0.20.0\nredis~=5.0.8\nPyJWT~=2.9.0\nbcrypt~=4.2.0",
    "app/main.py": "\"\"\"\n@author axiner\n@version v1.0.0\n@created 2024/7/29 22:22\n@abstract main\n@description\n@history\n\"\"\"\nfrom fastapi import FastAPI\n\nfrom app import (\n    initializer,\n    router,\n    middleware,\n)\n\napp = FastAPI()\n\ninitializer.setup()\nrouter.register_default_router(app)\nrouter.register_routers_dynamically(app, api_version='v1')\nmiddleware.register_middlewares(app)\n",
    "app/__init__.py": "\"\"\"\n@author axiner\n@version v1.0.0\n@created 2024/7/29 22:22\n@abstract app\n@description\n@history\n\"\"\"\nfrom pathlib import Path\n\nAPP_DIR = Path(__file__).absolute().parent\n",
    "app/api/default.py": "from fastapi import APIRouter\n\ndefault_router = APIRouter()\n\n\n@default_router.get(\"/ping\", summary=\"ping\")\ndef ping():\n    return \"pong\"\n",
    "app/api/exception.py": "from typing import Any\n\nfrom app.api.status import Status\n\n\nclass CustomException(Exception):\n\n    def __init__(\n            self,\n            msg: str = None,\n            code: int = None,\n            data: Any = None,\n            status: Status = Status.FAILURE,\n    ):\n        self.msg = msg or status.msg\n        self.code = code or status.code\n        self.data = data\n        self.status = status\n\n    def __str__(self) -> str:\n        return f\"{self.code}: {self.msg}\"\n\n    def __repr__(self) -> str:\n        class_name = self.__class__.__name__\n        return f\"{class_name}(code={self.code!r}, msg={self.msg!r})\"\n\n\nclass ParamsError(CustomException):\n\n    def __init__(\n            self,\n            msg: str = None,\n            code: int = None,\n            data: Any = None,\n            status: Status = Status.PARAMS_ERROR,\n    ):\n        super().__init__(msg, code, data, status)\n\n\nclass UnauthorizedError(CustomException):\n\n    def __init__(\n            self,\n            msg: str = None,\n            code: int = None,\n            data: Any = None,\n            status: Status = Status.UNAUTHORIZED_ERROR,\n    ):\n        super().__init__(msg, code, data, status)\n",
    "app/api/response.py": "from typing import Union, Mapping\n\nfrom starlette.background import BackgroundTask\nfrom starlette.responses import JSONResponse\nfrom toollib.utils import now2timestamp\n\nfrom app.api.status import Status\n\n\nclass JSONSuccess(JSONResponse):\n\n    def __init__(\n            self,\n            data: Union[dict, list, str] = None,\n            msg: str = None,\n            code: int = None,\n            status: Status = Status.SUCCESS,\n            status_code: int = 200,\n            headers: Mapping[str, str] = None,\n            media_type: str = None,\n            background: BackgroundTask = None,\n    ) -> None:\n        super().__init__(\n            content={\n                \"time\": now2timestamp(),\n                \"msg\": msg or status.msg,\n                \"code\": code or status.code,\n                \"data\": data,\n            },\n            status_code=status_code,\n            headers=headers,\n            media_type=media_type,\n            background=background,\n        )\n\n\nclass JSONFailure(JSONResponse):\n\n    def __init__(\n            self,\n            msg: str = None,\n            code: int = None,\n            data: Union[dict, list, str] = None,\n            status: Status = Status.FAILURE,\n            status_code: int = 200,\n            headers: Mapping[str, str] = None,\n            media_type: str = None,\n            background: BackgroundTask = None,\n    ) -> None:\n        super().__init__(\n            content={\n                \"time\": now2timestamp(),\n                \"msg\": msg or status.msg,\n                \"code\": code or status.code,\n                \"data\": data,\n            },\n            status_code=status_code,\n            headers=headers,\n            media_type=media_type,\n            background=background,\n        )\n",
    "app/api/status.py": "from enum import Enum\n\n\nclass Status(Enum):\n    SUCCESS = (0, '\u64cd\u4f5c\u6210\u529f')\n    FAILURE = (1, '\u64cd\u4f5c\u5931\u8d25')\n\n    PARAMS_ERROR = (400, '\u53c2\u6570\u9519\u8bef')\n    UNAUTHORIZED_ERROR = (401, '\u8ba4\u8bc1\u5931\u8d25')\n    # \u5efa\u8bae\uff1a\u4e1a\u52a1\u6a21\u5757\u9519\u8bef\u7801\u4ece10000\u5f00\u59cb\n    RECORD_EXISTS_ERROR = (10000, '\u8bb0\u5f55\u5df2\u5b58\u5728')\n\n    def __repr__(self):\n        return f'<{self.code}: {self.msg}>'\n\n    @property\n    def code(self):\n        return self.value[0]\n\n    @property\n    def msg(self):\n        return self.value[1]\n",
    "app/api/__init__.py": "\"\"\"\napi\n\"\"\"\n",
    "app/api/v1/user.py": "import traceback\n\nfrom fastapi import APIRouter, Depends\n\nfrom app.api.exception import ParamsError\nfrom app.api.response import JSONSuccess, JSONFailure\nfrom app.api.status import Status\nfrom app.business.user import (\n    GetUserBiz,\n    GetUserListBiz,\n    CreateUserBiz,\n    UpdateUserBiz,\n    DeleteUserBiz,\n    LoginUserBiz,\n    TokenUserBiz,\n)\nfrom app.initializer import g\nfrom app.middleware.auth import JWTUser, get_current_user\n\nuser_router = APIRouter()\n\n\n@user_router.get(\"/user/{user_id}\", summary=\"user\u8be6\u60c5\")\nasync def get(\n        user_id: int,\n        current_user: JWTUser = Depends(get_current_user),\n):\n    try:\n        user_biz = GetUserBiz(user_id=user_id)\n        data = await user_biz.get()\n    except Exception as e:\n        errmsg = str(e)\n        g.logger.error(errmsg)\n        g.logger.error(traceback.format_exc())\n        return JSONFailure(msg=errmsg)\n    return JSONSuccess(data=data)\n\n\n@user_router.get(\"/user\", summary=\"user\u5217\u8868\")\nasync def get_list(\n        page: int = 1,\n        size: int = 10,\n        current_user: JWTUser = Depends(get_current_user),\n):\n    try:\n        user_biz = GetUserListBiz(page=page, size=size)\n        data, total = await user_biz.get_list()\n    except Exception as e:\n        errmsg = str(e)\n        g.logger.error(errmsg)\n        g.logger.error(traceback.format_exc())\n        return JSONFailure(msg=errmsg)\n    return JSONSuccess(data={\"data\": data, \"total\": total})\n\n\n@user_router.post(\"/user\", summary=\"user\u521b\u5efa\")\nasync def create(\n        user_biz: CreateUserBiz,\n):\n    try:\n        user_biz.validate_params()\n        data = await user_biz.create()\n        if not data:\n            return JSONFailure(msg=\"\u7528\u6237\u5df2\u5b58\u5728\", status=Status.RECORD_EXISTS_ERROR)\n    except ParamsError as e:\n        return JSONFailure(msg=e.msg, code=e.code, data=e.data)\n    except Exception as e:\n        errmsg = str(e)\n        g.logger.error(errmsg)\n        g.logger.error(traceback.format_exc())\n        return JSONFailure(msg=errmsg)\n    return JSONSuccess(data=data)\n\n\n@user_router.put(\"/user/{user_id}\", summary=\"user\u66f4\u65b0\")\nasync def update(\n        user_id: int,\n        user_biz: UpdateUserBiz,\n        current_user: JWTUser = Depends(get_current_user),\n):\n    try:\n        status = await user_biz.update(user_id)\n    except Exception as e:\n        errmsg = str(e)\n        g.logger.error(errmsg)\n        g.logger.error(traceback.format_exc())\n        return JSONFailure(msg=errmsg)\n    return JSONSuccess(data={\"id\": user_id, \"status\": status})\n\n\n@user_router.delete(\"/user/{user_id}\", summary=\"user\u5220\u9664\")\nasync def delete(\n        user_id: int,\n        current_user: JWTUser = Depends(get_current_user),\n):\n    try:\n        user_biz = DeleteUserBiz()\n        status = await user_biz.delete(user_id)\n    except Exception as e:\n        errmsg = str(e)\n        g.logger.error(errmsg)\n        g.logger.error(traceback.format_exc())\n        return JSONFailure(msg=errmsg)\n    return JSONSuccess(data={\"id\": user_id, \"status\": status})\n\n\n@user_router.post(\"/user/login\", summary=\"userLogin\")\nasync def login(\n        user_biz: LoginUserBiz,\n):\n    try:\n        data, msg = await user_biz.login()\n        if not data:\n            return JSONFailure(msg=msg, status=Status.UNAUTHORIZED_ERROR)\n    except Exception as e:\n        errmsg = str(e)\n        g.logger.error(errmsg)\n        g.logger.error(traceback.format_exc())\n        return JSONFailure(msg=errmsg)\n    return JSONSuccess(data={\"token\": data})\n\n\n@user_router.post(\"/user/token\", summary=\"userToken\")\nasync def token(\n        user_biz: TokenUserBiz,\n        current_user: JWTUser = Depends(get_current_user),\n):\n    try:\n        data, msg = await user_biz.token()\n        if not data:\n            return JSONFailure(msg=msg, status=Status.UNAUTHORIZED_ERROR)\n    except Exception as e:\n        errmsg = str(e)\n        g.logger.error(errmsg)\n        g.logger.error(traceback.format_exc())\n        return JSONFailure(msg=errmsg)\n    return JSONSuccess(data={\"token\": data})\n",
    "app/api/v1/__init__.py": "\"\"\"\napi-v1\n\"\"\"\n",
    "app/atask/__init__.py": "\"\"\"\n\u5f02\u6b65\u4efb\u52a1\n    eg: celery\n\"\"\"\n",
    "app/business/base.py": "from typing import Dict, List, Optional\n\n\nclass BaseBiz:\n\n    @staticmethod\n    def format_all(rows, fields: List[str]) -> List[Dict[str, Optional[str]]]:\n        if not rows:\n            return []\n        return [dict(zip(fields, row)) for row in rows]\n\n    @staticmethod\n    def format_one(row, fields: List[str]) -> Dict[str, Optional[str]]:\n        if not row:\n            return dict()\n        return dict(zip(fields, row))\n",
    "app/business/user.py": "from sqlalchemy import text, select\nfrom toollib.utils import now2timestamp\n\nfrom app.business.base import BaseBiz\nfrom app.datatype.user import (\n    User,\n    GetUserReq,\n    GetUserListReq,\n    CreateUserReq,\n    UpdateUserReq,\n    DeleteUserReq,\n    LoginUserReq,\n    TokenUserReq,\n)\nfrom app.initializer import g\nfrom app.utils import auth\n\n\nclass GetUserBiz(GetUserReq, BaseBiz):\n\n    async def get(self):\n        async with g.db_async() as db:\n            result = await db.execute(\n                statement=text(f\"select {', '.join(self.fields)} from user where id = :id\"),\n                params={\"id\": self.user_id},\n            )\n            row = result.first()\n            data = self.format_one(row, result.keys())\n            return data\n\n\nclass GetUserListBiz(GetUserListReq, BaseBiz):\n\n    async def get_list(self):\n        async with g.db_async() as db:\n            result = await db.execute(\n                statement=text(f\"select {', '.join(self.fields)} from user limit :size offset :offset\"),\n                params={\"size\": self.size, \"offset\": self.offset},\n            )\n            rows = result.fetchall()\n            data = self.format_all(rows, result.keys())\n            total = 0\n            if rows:\n                result = await db.execute(text(\"select count(*) from user\"))\n                total = result.scalar_one()\n            return data, total\n\n\nclass CreateUserBiz(CreateUserReq):\n\n    async def create(self):\n        curr_timestamp = now2timestamp()\n        new_user = User(\n            id=g.snow.gen_uid(),\n            name=self.name,\n            phone=self.phone,\n            age=self.age,\n            gender=self.gender,\n            password=auth.hash_password(self.password),\n            jwt_key=auth.gen_jwt_key(),\n            created_at=curr_timestamp,\n            updated_at=curr_timestamp,\n        )\n        async with g.db_async() as db:\n            statement = select(User).where(User.phone == self.phone)\n            result = await db.execute(statement)\n            if result.scalar_one_or_none():\n                return False\n            db.add(new_user)\n            await db.commit()\n            return new_user.model_dump(include=self.fields)\n\n\nclass UpdateUserBiz(UpdateUserReq):\n\n    async def update(self, user_id: int):\n        async with g.db_async() as db:\n            statement = select(User).where(User.id == user_id)\n            result = await db.execute(statement)\n            user = result.scalar_one_or_none()\n            if user is None:\n                return False\n            update_data = {\n                \"name\": self.name,\n                \"age\": self.age,\n                \"gender\": self.gender,\n                \"updated_at\": now2timestamp(),\n            }\n            for key, value in update_data.items():\n                if value is not None:\n                    setattr(user, key, value)\n            db.add(user)\n            await db.commit()\n            return True\n\n\nclass DeleteUserBiz(DeleteUserReq):\n\n    async def delete(self, user_id: int):\n        async with g.db_async() as db:\n            statement = select(User).where(User.id == user_id)\n            result = await db.execute(statement)\n            user = result.scalar_one_or_none()\n            if not user:\n                return False\n            await db.delete(user)\n            await db.commit()\n            return True\n\n\nclass LoginUserBiz(LoginUserReq, BaseBiz):\n\n    async def login(self):\n        async with g.db_async() as db:\n            statement = select(User).where(User.phone == self.phone)\n            result = await db.execute(statement)\n            user = result.scalar_one_or_none()\n            if not user or not auth.verify_password(self.password, user.password):\n                return None, \"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\"\n            new_jwt_key = auth.gen_jwt_key()\n            token = auth.gen_jwt(\n                payload={\n                    \"id\": user.id,\n                    \"phone\": user.phone,\n                    \"name\": user.name,\n                    \"age\": user.age,\n                    \"gender\": user.gender,\n                },\n                jwt_key=new_jwt_key,\n            )\n            user.jwt_key = new_jwt_key\n            db.add(user)\n            await db.commit()\n            return token, \"\"\n\n\nclass TokenUserBiz(TokenUserReq, BaseBiz):\n\n    async def token(self):\n        async with g.db_async() as db:\n            statement = select(User).where(User.id == self.user_id)\n            result = await db.execute(statement)\n            user = result.scalar_one_or_none()\n            if not user:\n                return None, \"\u7528\u6237\u4e0d\u5b58\u5728\"\n            new_jwt_key = auth.gen_jwt_key()\n            token = auth.gen_jwt(\n                payload={\n                    \"id\": user.id,\n                    \"phone\": user.phone,\n                    \"name\": user.name,\n                    \"age\": user.age,\n                    \"gender\": user.gender,\n                },\n                jwt_key=new_jwt_key,\n            )\n            user.jwt_key = new_jwt_key\n            db.add(user)\n            await db.commit()\n            return token, \"\"\n",
    "app/business/__init__.py": "\"\"\"\n\u4e1a\u52a1\n\"\"\"\n",
    "app/datatype/user.py": "from sqlmodel import SQLModel, Field\nfrom typing import Optional\n\nfrom app.api.exception import ParamsError\n\n\nclass User(SQLModel, table=True):\n    __tablename__ = \"user\"\n\n    id: int = Field(default=None, primary_key=True)\n    phone: str = Field(index=True, unique=True)\n    password: str = Field(default=None)\n    jwt_key: str = Field(default=None)\n    name: str = Field(default=None)\n    age: int = Field(default=None)\n    gender: int = Field(default=None)\n    created_at: int = Field(default=None)\n    updated_at: int = Field(default=None)\n\n\nclass GetUserReq(SQLModel):\n    user_id: int\n\n    @property\n    def fields(self):\n        return [\n            \"id\",\n            \"phone\",\n            \"name\",\n            \"age\",\n            \"gender\",\n            \"created_at\",\n            \"updated_at\",\n        ]\n\n\nclass GetUserListReq(SQLModel):\n    page: Optional[int] = 1\n    size: Optional[int] = 10\n\n    @property\n    def offset(self):\n        return (self.page - 1) * self.size\n\n    @property\n    def fields(self):\n        return [\n            \"id\",\n            \"phone\",\n            \"name\",\n            \"age\",\n            \"gender\",\n            \"created_at\",\n            \"updated_at\",\n        ]\n\n\nclass CreateUserReq(SQLModel):\n    phone: str\n    password: str\n    name: Optional[str] = None\n    age: Optional[int] = None\n    gender: Optional[int] = None\n\n    def validate_params(self):\n        if self.gender and self.gender not in [1, 2]:\n            raise ParamsError(\"gender is EMUM(1, 2)\")\n\n    @property\n    def fields(self):\n        return [\n            \"id\",\n            \"phone\",\n            \"name\",\n            \"age\",\n            \"gender\",\n            \"created_at\",\n            \"updated_at\",\n        ]\n\n\nclass UpdateUserReq(SQLModel):\n    name: Optional[str] = None\n    age: Optional[int] = None\n    gender: Optional[int] = None\n\n\nclass DeleteUserReq(SQLModel):\n    pass\n\n\nclass LoginUserReq(SQLModel):\n    phone: str\n    password: str\n\n\nclass TokenUserReq(SQLModel):\n    user_id: int\n",
    "app/datatype/__init__.py": "\"\"\"\n\u6570\u636e\u7c7b\u578b\n\"\"\"\n",
    "app/initializer/conf.py": "import os\n\nimport yaml\nfrom dotenv import load_dotenv\n\nfrom app import APP_DIR\n\nCONFIG_DIR = APP_DIR.parent.joinpath(\"config\")\nENV_PATH = os.environ.setdefault(\"ENV_PATH\", str(CONFIG_DIR.joinpath(\".env\")))\nYAML_PATH = CONFIG_DIR.joinpath(\"app.yaml\")\n\n\nclass BaseConf:\n    debug: bool\n    log_dir: str\n    db_echo: bool\n    worker_id: int\n    datacenter_id: int\n\n\nclass Conf(BaseConf):\n\n    # \u914d\u7f6e\u663e\u6027\u8bbe\u7f6e\n    db_url: str\n    db_async_url: str\n    redis_host: str\n    redis_port: int\n    redis_db: int\n\n    def __init__(self):\n        super().__init__()\n        self.load_env()\n        yaml_conf = self.load_yaml()\n\n        # \u914d\u7f6e\u663e\u6027\u8bbe\u7f6e\n        self.debug = yaml_conf.get(\"debug\", False)\n        self.log_dir = yaml_conf.get(\"log_dir\", \"\")\n        self.db_echo = yaml_conf.get(\"db_echo\", False)\n        self.worker_id = yaml_conf.get(\"worker_id\", 0)\n        self.datacenter_id = yaml_conf.get(\"datacenter_id\", 0)\n        # #\n        self.db_url = yaml_conf.get(\"db_url\")\n        self.db_async_url = yaml_conf.get(\"db_async_url\")\n        self.redis_host = yaml_conf.get(\"redis_host\")\n        self.redis_port = yaml_conf.get(\"redis_port\")\n        self.redis_db = yaml_conf.get(\"redis_db\")\n\n    @staticmethod\n    def load_env():\n        load_dotenv(dotenv_path=ENV_PATH)\n\n    @staticmethod\n    def load_yaml():\n        yaml_path = os.environ.setdefault(\"YAML_PATH\", str(YAML_PATH))\n        with open(yaml_path, 'r') as file:\n            yaml_conf = yaml.safe_load(file)\n            return yaml_conf\n\n\ndef init_conf() -> Conf:\n    return Conf()\n",
    "app/initializer/db.py": "import importlib\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\nfrom sqlalchemy.orm import sessionmaker, scoped_session\nfrom sqlmodel import SQLModel\n\nfrom app import APP_DIR\n\nDATATYPE_MOD_DIR = APP_DIR.joinpath(\"datatype\")\nDATATYPE_MOD_PREFIX = \"app.datatype\"\nDEFAULT_DB_URL = f\"sqlite:///{APP_DIR.parent.joinpath('app.sqlite3')}\"\nDEFAULT_DB_ASYNC_URL = f\"sqlite+aiosqlite:///{APP_DIR.parent.joinpath('app.sqlite3')}\"\n\n\ndef init_db(\n        db_url: str,\n        db_echo: bool,\n        db_pool_size: int = 10,\n        db_max_overflow: int = 5,\n        db_pool_recycle: int = 3600,\n) -> scoped_session:\n    db_url = db_url or DEFAULT_DB_URL\n    db_echo = db_echo or False\n    kwargs = {\n        \"pool_size\": db_pool_size,\n        \"max_overflow\": db_max_overflow,\n        \"pool_recycle\": db_pool_recycle,\n    }\n    if db_url.startswith(\"sqlite\"):\n        kwargs = {}\n    engine = create_engine(\n        url=db_url,\n        echo=db_echo,\n        echo_pool=db_echo,\n        **kwargs,\n    )\n    db_session = sessionmaker(engine, expire_on_commit=False)\n    return scoped_session(db_session)\n\n\ndef init_db_async(\n        db_async_url: str,\n        db_echo: bool,\n        db_pool_size: int = 10,\n        db_max_overflow: int = 5,\n        db_pool_recycle: int = 3600,\n) -> sessionmaker:\n    db_async_url = db_async_url or DEFAULT_DB_ASYNC_URL\n    db_echo = db_echo or False\n    kwargs = {\n        \"pool_size\": db_pool_size,\n        \"max_overflow\": db_max_overflow,\n        \"pool_recycle\": db_pool_recycle,\n    }\n    if db_async_url.startswith(\"sqlite\"):\n        kwargs = {}\n    async_engine = create_async_engine(\n        url=db_async_url,\n        echo=db_echo,\n        echo_pool=db_echo,\n        **kwargs,\n    )\n    async_session_factory = sessionmaker(async_engine, expire_on_commit=False, class_=AsyncSession)  # noqa\n    return async_session_factory\n\n\ndef db_create_tables_dynamically(db_url: str, db_echo: bool = False, obj_suffix: str = \"\"):\n    \"\"\"\n    \u52a8\u6001\u521b\u5efa\u8868\n    \u8981\u6c42\uff1a\n        \u6a21\u578b\u6a21\u5757\uff1a\u641c\u7d22\u975e'__'\u5f00\u5934\u7684\u6a21\u5757\n        \u6a21\u578b\u5bf9\u8c61\uff1a{\u6a21\u5757\u540d\u79f0}{\u540e\u7f00}\n    :param db_url: db url\n    :param db_echo: db echo\n    :param obj_suffix: \u5bf9\u8c61\u540e\u7f00\n    :return:\n    \"\"\"\n    db_echo = db_echo or False\n    engine = create_engine(\n        url=db_url or DEFAULT_DB_URL,\n        echo=db_echo,\n        echo_pool=db_echo,\n    )\n    for f in DATATYPE_MOD_DIR.glob(\"*.py\"):\n        if not f.name.startswith(\"__\"):\n            mod_str = f.name[:-3]\n            mod_obj = importlib.import_module(f\"{DATATYPE_MOD_PREFIX}.{mod_str}\")\n            mod_obj_str = f\"{mod_str.title()}{obj_suffix}\"\n            if not hasattr(mod_obj, mod_obj_str):\n                continue\n            model: SQLModel = getattr(mod_obj, mod_obj_str)\n            model.metadata.create_all(engine)\n",
    "app/initializer/logger.py": "import sys\nfrom pathlib import Path\n\nfrom loguru import logger\nfrom loguru._logger import Logger  # noqa\n\nLOG_CONSOLE_FORMAT = \"{time:YYYY-MM-DD HH:mm:ss.SSS} {level} {file}:{line} {message}\"\nLOG_FILE_FORMAT = \"{time:YYYY-MM-DD HH:mm:ss.SSS} {level} {file}:{line} {message}\"\nLOG_FILE_PREFIX = \"app\"\nLOG_ROTATION = \"00:00\"\nLOG_RETENTION = \"15 days\"\n\n\ndef init_logger(\n        debug: bool,\n        log_dir: str,\n) -> Logger:\n    logger.remove(None)\n    _lever = \"DEBUG\" if debug else \"INFO\"\n    logger.add(\n        sys.stdout,\n        format=LOG_CONSOLE_FORMAT,\n        level=_lever,\n    )\n    if log_dir:\n        _log_dir = Path(log_dir)\n        logger.add(\n            _log_dir.joinpath(f\"{LOG_FILE_PREFIX}-info.log\"),\n            format=LOG_FILE_FORMAT,\n            level=_lever,\n            rotation=LOG_ROTATION,\n            retention=LOG_RETENTION,\n            encoding=\"utf-8\"\n        )\n        logger.add(\n            _log_dir.joinpath(f\"{LOG_FILE_PREFIX}-error.log\"),\n            format=LOG_FILE_FORMAT,\n            level=\"ERROR\",\n            rotation=LOG_ROTATION,\n            retention=LOG_RETENTION,\n            encoding=\"utf-8\"\n        )\n    return logger\n",
    "app/initializer/redis.py": "from toollib.redis_cli import RedisCli\n\n\ndef init_redis(\n        host: str,\n        port: int,\n        db: int,\n        **kwargs,\n) -> RedisCli:\n    if not host:\n        return RedisCli()\n    return RedisCli(host=host, port=port, db=db, **kwargs)\n",
    "app/initializer/snow.py": "from toollib.guid import SnowFlake\n\n\ndef init_snow(\n        worker_id: int,\n        datacenter_id: int,\n) -> SnowFlake:  # \u5efa\u8bae\uff1a\u91c7\u7528\u670d\u52a1\u7684\u65b9\u5f0f\u901a\u8fc7api\u6765\u83b7\u53d6\n    return SnowFlake(worker_id=worker_id, datacenter_id=datacenter_id)\n",
    "app/initializer/__init__.py": "\"\"\"\n\u521d\u59cb\u5316\n\"\"\"\nfrom loguru._logger import Logger  # noqa\nfrom sqlalchemy.orm import sessionmaker\nfrom toollib.guid import SnowFlake\nfrom toollib.redis_cli import RedisCli\nfrom toollib.utils import Singleton\n\nfrom app.initializer.conf import init_conf\nfrom app.initializer.db import init_db_async, db_create_tables_dynamically\nfrom app.initializer.logger import init_logger\nfrom app.initializer.redis import init_redis\nfrom app.initializer.snow import init_snow\n\n\nclass G(metaclass=Singleton):\n    \"\"\"\n    \u5168\u5c40\u53d8\u91cf\n    \"\"\"\n    conf = None\n    logger: Logger = None\n    db_async: sessionmaker = None\n    redis: RedisCli = None\n    snow: SnowFlake = None\n\n\ndef setup():\n    \"\"\"\n    \u521d\u59cb\u5316\n    \"\"\"\n    g.conf = init_conf()\n    g.logger = init_logger(debug=g.conf.debug, log_dir=g.conf.log_dir)\n    g.db_async = init_db_async(db_async_url=g.conf.db_async_url, db_echo=g.conf.db_echo)\n    db_create_tables_dynamically(db_url=g.conf.db_url, db_echo=g.conf.db_echo)\n    g.redis = init_redis(host=g.conf.redis_host, port=g.conf.redis_port, db=g.conf.redis_db)\n    g.snow = init_snow(worker_id=g.conf.worker_id, datacenter_id=g.conf.datacenter_id)\n\n\ng = G()\n# \u5efa\u8bae\uff1a\n# \u4e3a\u4e86\u907f\u514dG\u4e0b\u7684\u5168\u5c40\u53d8\u91cf\u5728\u672a\u521d\u59cb\u5316\u65f6\u4f7f\u7528\uff0c\n# \u8bf7\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u8c03\u7528\uff1ag.conf.xxx\n# \u800c\u4e0d\u662f\u5728\u6a21\u5757\u9884\u5148\u5b9a\u4e49\u5168\u5c40\u53d8\u91cf\u518d\u8c03\u7528\n# <<< \u5efa\u8bae\n",
    "app/middleware/auth.py": "from fastapi import Depends, HTTPException\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom typing import Optional\n\nfrom fastapi.security.utils import get_authorization_scheme_param\nfrom sqlalchemy import select\nfrom sqlmodel import SQLModel\nfrom starlette.requests import Request\nfrom starlette.status import HTTP_403_FORBIDDEN\n\nfrom app.api.exception import UnauthorizedError\nfrom app.datatype.user import User\nfrom app.initializer import g\nfrom app.utils.auth import verify_jwt\n\n\nclass JWTUser(SQLModel):\n    id: int\n    phone: str\n    name: str\n    age: int\n    gender: int\n\n\nclass JWTAuthorizationCredentials(HTTPAuthorizationCredentials):\n    user: JWTUser\n\n\nclass JWTBearer(HTTPBearer):\n\n    async def __call__(\n            self, request: Request\n    ) -> Optional[JWTAuthorizationCredentials]:\n        authorization = request.headers.get(\"Authorization\")\n        scheme, credentials = get_authorization_scheme_param(authorization)\n        if not (authorization and scheme and credentials):\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n                )\n            else:\n                return None\n        if scheme.lower() != \"bearer\":\n            if self.auto_error:\n                raise HTTPException(\n                    status_code=HTTP_403_FORBIDDEN,\n                    detail=\"Invalid authentication credentials\",\n                )\n            else:\n                return None\n        user = await self.verify_credentials(credentials)\n        return JWTAuthorizationCredentials(scheme=scheme, credentials=credentials, user=user)\n\n    @staticmethod\n    async def verify_credentials(credentials: str) -> JWTUser:\n        playload = verify_jwt(credentials)\n        if playload is None:\n            raise UnauthorizedError()\n        # \u5efa\u8bae\uff1ajwt_key\u8fdb\u884credis\u7f13\u5b58\n        async with g.db_async() as db:\n            try:\n                statement = select(User).where(User.id == playload.get(\"id\"))\n                result = await db.execute(statement)\n                user = result.scalar_one_or_none()\n                if user is None:\n                    raise UnauthorizedError()\n            except Exception as e:\n                raise UnauthorizedError(str(e))\n        # <<< \u5efa\u8bae\n        verify_jwt(credentials, jwt_key=user.jwt_key)\n        return JWTUser(\n            id=playload.get(\"id\"),\n            phone=playload.get(\"phone\"),\n            name=playload.get(\"name\"),\n            age=playload.get(\"age\"),\n            gender=playload.get(\"gender\"),\n        )\n\n\ndef get_current_user(\n        credentials: Optional[JWTAuthorizationCredentials] = Depends(JWTBearer(auto_error=True))\n) -> JWTUser:\n    if not credentials:\n        return JWTUser()\n    return credentials.user\n",
    "app/middleware/cors.py": "from fastapi.middleware.cors import CORSMiddleware\n\n\nclass Cors:\n    middleware_class = CORSMiddleware\n    allow_origins = [\n        \"http://localhost:8000\",\n        # \u53ef\u6dfb\u52a0\u5176\u4ed6\u6240\u9700\n    ]\n    allow_credentials = True\n    allow_methods = [\"*\"]\n    allow_headers = [\"*\"]\n",
    "app/middleware/exception.py": "from fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\nfrom app.api.exception import CustomException\nfrom app.api.response import JSONFailure\nfrom app.api.status import Status\n\n\nclass ExceptionHandler:\n\n    @staticmethod\n    async def custom_exception_handler(request: Request, exc: CustomException) -> JSONResponse:\n        return JSONFailure(msg=exc.msg, code=exc.code, data=exc.data)\n\n    @staticmethod\n    async def http_exception_handler(request: Request, exc: HTTPException) -> JSONResponse:\n        return JSONFailure(msg=exc.detail, code=exc.status_code)\n\n    @staticmethod\n    async def validation_exception_handler(request: Request, exc: RequestValidationError) -> JSONResponse:\n        return JSONFailure(\n            msg=\", \".join([f\"'{item['loc'][1] if len(item['loc']) > 1 else item['loc'][0]}' {item['msg'].lower()}\" for item in exc.errors()]),  # noqa: E501\n            status=Status.PARAMS_ERROR,\n        )\n",
    "app/middleware/__init__.py": "\"\"\"\n\u4e2d\u95f4\u4ef6\n\"\"\"\nfrom fastapi import FastAPI\nfrom fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException\n\nfrom app.api.exception import CustomException\nfrom app.middleware.cors import Cors\nfrom app.middleware.exception import ExceptionHandler\n\n\ndef register_middlewares(app: FastAPI):\n    \"\"\"\u6ce8\u518c\u4e2d\u95f4\u4ef6\"\"\"\n    app.add_middleware(\n        middleware_class=Cors.middleware_class,\n        allow_origins=Cors.allow_origins,\n        allow_credentials=Cors.allow_credentials,\n        allow_methods=Cors.allow_methods,\n        allow_headers=Cors.allow_headers,\n    )\n\n    app.add_exception_handler(CustomException, ExceptionHandler.custom_exception_handler)  # type: ignore\n    app.add_exception_handler(HTTPException, ExceptionHandler.http_exception_handler)  # type: ignore\n    app.add_exception_handler(RequestValidationError, ExceptionHandler.validation_exception_handler)  # type: ignore\n",
    "app/router/__init__.py": "\"\"\"\n\u8def\u7531\n\"\"\"\nimport importlib\n\nfrom fastapi import FastAPI\n\nfrom app import APP_DIR\n\nAPI_MOD_DIR = APP_DIR.joinpath(\"api\")\nAPI_MOD_PREFIX = \"app.api\"\nAPI_PREFIX = \"/api\"\n\n\ndef register_default_router(app: FastAPI, mod_str: str = \"default\", obj_suffix: str = \"_router\"):\n    \"\"\"\n    \u6ce8\u518c\u9ed8\u8ba4\u8def\u7531\n    \"\"\"\n    mod_obj = importlib.import_module(f\"{API_MOD_PREFIX}.{mod_str}\")\n    mod_obj_str = f\"{mod_str}{obj_suffix}\"\n    router = getattr(mod_obj, mod_obj_str)\n    app.include_router(router, prefix=API_PREFIX, tags=[mod_str])\n\n\ndef register_routers_dynamically(app: FastAPI, api_version: str = \"v1\", obj_suffix: str = \"_router\"):\n    \"\"\"\n    \u52a8\u6001\u6ce8\u518c\u8def\u7531\n    \u8981\u6c42\uff1a\n        \u8def\u7531\u6a21\u5757\uff1a\u641c\u7d22\u975e'__'\u5f00\u5934\u7684\u6a21\u5757\n        \u8def\u7531\u5bf9\u8c61\uff1a{\u6a21\u5757\u540d\u79f0}{\u540e\u7f00}\n    :param app: FastAPI\u5b9e\u4f8b\n    :param api_version: api\u7248\u672c\n    :param obj_suffix: \u5bf9\u8c61\u540e\u7f00\n    :return:\n    \"\"\"\n    curr_api_prefix = f\"{API_PREFIX}/{api_version}\"\n    for f in API_MOD_DIR.joinpath(api_version).glob(\"*.py\"):\n        if not f.name.startswith(\"__\"):\n            mod_str = f.name[:-3]\n            mod_obj = importlib.import_module(f\"{API_MOD_PREFIX}.{api_version}.{mod_str}\")\n            mod_obj_str = f\"{mod_str}{obj_suffix}\"\n            if not hasattr(mod_obj, mod_obj_str):\n                continue\n            router = getattr(mod_obj, mod_obj_str)\n            app.include_router(router, prefix=curr_api_prefix, tags=[mod_str])\n",
    "app/tests/__init__.py": "\"\"\"\n\u6d4b\u8bd5\n\"\"\"\n",
    "app/utils/auth.py": "import secrets\nfrom datetime import datetime, timedelta\n\nimport bcrypt\nimport jwt\n\nfrom app.api.exception import CustomException\nfrom app.api.status import Status\n\nALGORITHM = \"HS256\"\n\n\ndef gen_jwt(payload: dict, jwt_key: str, exp_minutes: int = 24 * 60 * 30):\n    payload.update({\"exp\": datetime.utcnow() + timedelta(minutes=exp_minutes)})\n    encoded_jwt = jwt.encode(payload=payload, key=jwt_key, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\ndef verify_jwt(token: str, jwt_key: str = None) -> dict:\n    try:\n        if not jwt_key:\n            return jwt.decode(jwt=token, options={\"verify_signature\": False})\n        return jwt.decode(jwt=token, key=jwt_key, algorithms=[ALGORITHM])\n    except jwt.PyJWTError as exc:\n        raise CustomException(status=Status.UNAUTHORIZED_ERROR, msg=str(exc))\n\n\ndef gen_jwt_key():\n    return secrets.token_hex(16)\n\n\ndef hash_password(password: str) -> str:\n    salt = bcrypt.gensalt()\n    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)\n    return hashed_password.decode('utf-8')\n\n\ndef verify_password(password: str, hashed_password: str) -> bool:\n    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))\n",
    "app/utils/__init__.py": "\"\"\"\nutils\n\"\"\"\n",
    "config/.env": "",
    "config/app.yaml": "debug: true\nlog_dir: \"./log\"\ndb_echo: true\nworker_id: 0\ndatacenter_id: 0\n# #\ndb_url:\ndb_async_url:\nredis_host:\nredis_port:\nredis_db:\n",
    "config/uvicorn_logging.json": "{\n  \"version\": 1,\n  \"disable_existing_loggers\": false,\n  \"formatters\": {\n    \"default\": {\n      \"()\": \"uvicorn.logging.DefaultFormatter\",\n      \"fmt\": \"%(asctime)s %(levelname)s %(filename)s:%(lineno)d %(message)s\",\n      \"use_colors\": null\n    },\n    \"access\": {\n      \"()\": \"uvicorn.logging.AccessFormatter\",\n      \"fmt\": \"%(asctime)s %(levelname)s %(client_addr)s - \\\"%(request_line)s\\\" %(status_code)s\"\n    }\n  },\n  \"handlers\": {\n    \"default\": {\n      \"formatter\": \"default\",\n      \"class\": \"logging.StreamHandler\",\n      \"stream\": \"ext://sys.stderr\"\n    },\n    \"access\": {\n      \"formatter\": \"access\",\n      \"class\": \"logging.StreamHandler\",\n      \"stream\": \"ext://sys.stdout\"\n    }\n  },\n  \"loggers\": {\n    \"uvicorn\": {\n      \"handlers\": [\n        \"default\"\n      ],\n      \"level\": \"INFO\",\n      \"propagate\": false\n    },\n    \"uvicorn.error\": {\n      \"level\": \"INFO\"\n    },\n    \"uvicorn.access\": {\n      \"handlers\": [\n        \"access\"\n      ],\n      \"level\": \"INFO\",\n      \"propagate\": false\n    }\n  }\n}\n",
    "deploy/.gitkeep": "",
    "docs/.gitkeep": "",
    "log/.gitkeep": ""
}