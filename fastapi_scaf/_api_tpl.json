{
    "abd_app_api.py": "import traceback\n\nfrom fastapi import APIRouter, Depends\n\nfrom app.api.response import Response, response_docs\nfrom app.business.tpl import (\n    GetTplBiz,\n)\nfrom app.api.status import Status\nfrom app.initializer import g\nfrom app.middleware.auth import JWTUser, get_current_user\n\ntpl_router = APIRouter()\n_active = True  # \u6fc0\u6d3b(\u82e5\u7701\u7565\u5219\u9ed8\u8ba4True)\n\n\n@tpl_router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tpl\u8be6\u60c5\",\n    responses=response_docs(\n        model=GetTplBiz,\n    ),\n)\nasync def get(\n        tpl_id: str,\n        current_user: JWTUser = Depends(get_current_user),  # \u8ba4\u8bc1\n):\n    try:\n        tpl_biz = GetTplBiz(id=tpl_id)\n        data = await tpl_biz.get()\n        if not data:\n            return Response.failure(msg=\"\u672a\u5339\u914d\u5230\u8bb0\u5f55\", status=Status.RECORD_NOT_EXIST_ERROR)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Response.failure(msg=\"tpl\u8be6\u60c5\u5931\u8d25\", error=e)\n    return Response.success(data=data)\n",
    "abd_app_business.py": "from app.datatype.tpl import (\n    GetTplMdl,\n)\n\n\nclass GetTplBiz(GetTplMdl):\n\n    async def get(self):\n        # TODO: \u4e1a\u52a1\u903b\u8f91\n        pass\n",
    "abd_app_datatype.py": "from pydantic import BaseModel, Field\nfrom sqlalchemy import Column, String\n\nfrom app.datatype import DeclBase, filter_fields\nfrom app.initializer import g\n\n\nclass Tpl(DeclBase):\n    __tablename__ = \"tpl\"\n\n    id = Column(String(20), primary_key=True, default=g.snow.gen_uid, comment=\"\u4e3b\u952e\")\n    name = Column(String(50), nullable=False, comment=\"\u540d\u79f0\")\n\n\nclass GetTplMdl(BaseModel):\n    id: str = Field(...)\n    # #\n    name: str = None\n\n    @classmethod\n    def response_fields(cls):\n        return filter_fields(\n            cls,\n            exclude=[]\n        )\n",
    "ab_app_api.py": "import traceback\n\nfrom fastapi import APIRouter, Depends\n\nfrom app.api.response import Response, response_docs\nfrom app.business.tpl import (\n    GetTplBiz,\n)\nfrom app.api.status import Status\nfrom app.initializer import g\nfrom app.middleware.auth import JWTUser, get_current_user\n\ntpl_router = APIRouter()\n_active = True  # \u6fc0\u6d3b(\u82e5\u7701\u7565\u5219\u9ed8\u8ba4True)\n\n\n@tpl_router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tpl\u8be6\u60c5\",\n    responses=response_docs(\n        model=GetTplBiz,\n    ),\n)\nasync def get(\n        tpl_id: str,\n        current_user: JWTUser = Depends(get_current_user),  # \u8ba4\u8bc1\n):\n    try:\n        tpl_biz = GetTplBiz(id=tpl_id)\n        data = await tpl_biz.get()\n        if not data:\n            return Response.failure(msg=\"\u672a\u5339\u914d\u5230\u8bb0\u5f55\", status=Status.RECORD_NOT_EXIST_ERROR)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Response.failure(msg=\"tpl\u8be6\u60c5\u5931\u8d25\", error=e)\n    return Response.success(data=data)\n",
    "ab_app_business.py": "from pydantic import BaseModel, Field\n\n\nclass GetTplBiz(BaseModel):\n    id: str = Field(...)\n\n    async def get(self):\n        # TODO: \u4e1a\u52a1\u903b\u8f91\n        pass\n",
    "a_app_api.py": "import traceback\n\nfrom fastapi import APIRouter, Depends\n\nfrom app.api.response import Response, response_docs\nfrom app.api.status import Status\nfrom app.initializer import g\nfrom app.middleware.auth import JWTUser, get_current_user\n\ntpl_router = APIRouter()\n_active = True  # \u6fc0\u6d3b(\u82e5\u7701\u7565\u5219\u9ed8\u8ba4True)\n\n\n@tpl_router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tpl\u8be6\u60c5\",\n    responses=response_docs(),\n)\nasync def get(\n        tpl_id: str,\n        current_user: JWTUser = Depends(get_current_user),  # \u8ba4\u8bc1\n):\n    try:\n        data = {}  # TODO: \u5f85\u5904\u7406\n        if not data:\n            return Response.failure(msg=\"\u672a\u5339\u914d\u5230\u8bb0\u5f55\", status=Status.RECORD_NOT_EXIST_ERROR)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Response.failure(msg=\"tpl\u8be6\u60c5\u5931\u8d25\", error=e)\n    return Response.success(data=data)\n",
    "only_app_api.py": "import traceback\n\nfrom fastapi import APIRouter, Depends\n\nfrom app.api.response import Response, response_docs\nfrom app.api.status import Status\nfrom app.initializer import g\nfrom app.middleware.auth import JWTUser, get_current_user\n\ntpl_router = APIRouter()\n_active = True  # \u6fc0\u6d3b(\u82e5\u7701\u7565\u5219\u9ed8\u8ba4True)\n\n\n@tpl_router.get(\n    path=\"/tpl/{tpl_id}\",\n    summary=\"tpl\u8be6\u60c5\",\n    responses=response_docs(),\n)\nasync def get(\n        tpl_id: str,\n        current_user: JWTUser = Depends(get_current_user),  # \u8ba4\u8bc1\n):\n    try:\n        data = {}  # TODO: \u5f85\u5904\u7406\n        if not data:\n            return Response.failure(msg=\"\u672a\u5339\u914d\u5230\u8bb0\u5f55\", status=Status.RECORD_NOT_EXIST_ERROR)\n    except Exception as e:\n        g.logger.error(traceback.format_exc())\n        return Response.failure(msg=\"tpl\u8be6\u60c5\u5931\u8d25\", error=e)\n    return Response.success(data=data)\n",
    "only_app_business.py": "from pydantic import BaseModel, Field\n\n\nclass GetTplBiz(BaseModel):\n    id: str = Field(...)\n\n    async def get(self):\n        # TODO: \u4e1a\u52a1\u903b\u8f91\n        pass\n"
}